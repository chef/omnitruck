#! /usr/bin/env ruby

require 'yajl'
require 'yaml'
require 'optparse'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), 'lib'))

require 'chef/project'
require 'chef/project_cache'
require 'chef/channel'
require 'chef/version'

class S3Poller
  attr_reader :config

  def initialize
    @options = {}

    optparse = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} -e <environment>"

      opts.on_tail('-h', '--help', 'Print this help message') do
        puts opts
        exit
      end
      opts.on('-e ENVIRONMENT',
              "Specify this application's environment - REQUIRED") do |e|
        @options[:environment] = e
      end
    end
    optparse.parse!

    @options[:config] = "./config/config.yml"

    required = [:environment, :config]
    missing = required.select { |opt| @options[opt].nil? }
    unless missing.empty?
      puts "[ERROR] Missing required options: #{missing.join(', ')}"
      puts optparse
      exit 1
    end

    unless File.exists?(@options[:config])
      puts "[ERROR] Config file could not be found at #{@options[:config]}"
      puts optparse
      exit 1
    end

    @config = YAML.load_file(@options[:config])[@options[:environment]]
  end

  def run
    channels.each do |channel|
      all_project_caches_for_channel(channel).each do |project_cache|
        if project_cache.name == 'chef'
          project_cache.update(Opscode::Version.parse('13.0.0'))
        elsif project_cache.name == 'chefdk'
          project_cache.update(:all)
        else
          project_cache.update
        end
      end
    end
  end

  def all_project_caches_for_channel(channel)
    projects.map do |project_name|
      Chef::ProjectCache.for_project(project_name, channel, metadata_dir)
    end
  end

  def projects
    config.fetch('projects', Chef::Project::KNOWN_PROJECTS)
  end

  def metadata_dir
    config['metadata_dir']
  end

  def channels
    config['channels'].map do |(channel_name, channel_info)|
      Chef::Channel.new(
        channel_name,
        channel_info['aws_metadata_bucket'],
        channel_info['aws_packages_bucket']
      )
    end
  end
end

if $0 == __FILE__
  S3Poller.new.run
end

exit
